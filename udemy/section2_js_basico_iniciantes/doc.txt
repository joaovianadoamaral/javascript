<!--> area de instalações<-->

intall vs code
install node.js
install extensão do code runner

é possivel a utilização do código sem usar o coderunner:
use o comando no terminal ->> node nome_arquivo.js
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
aula 1

arquivos javascripts são determinados pela extensão .js

Usado sempre que quisermos mostrar algo na tela 
    Console.log(); == console.log()

O ';' é opcional no javascripts
console é o nosso objeto e .log() é um método desse objeto

dentro de 
    console.log();
* podemos colocar texto entre " texto "
* textos estão entre aspas simples ou aspas duplas
* o método log() quebra a linha por padrão
* crase também serve para `` mostrar texto
* caso queira mostrar a aspas em si na mensagem use o outro tipo.
    para mostrar aspas duplas inicie com aspas simples ex:
        ' "mensagem" ' --------Saída : "mensagem"

tudo que está entre '', "" e `` é considerado uma string

o js é uma linguagem de tipagem dinâmica

string = texto 

para mostra um número digite ele sem aspas
use o ponto para mostrar casa decimal

dentro de console.log(valor1, valor2, valor3, etc);
    da pra mostrar vários valores sem quebrar linha

não existe a separação entre número de ponto flutuante e inteiro em js
    Ambos são do tipo Number

essa função só exibida no console.
    não faz nada no site
    realizada no terminal
    no navegador é possivel acessar o console seguindo os passos:
        botão direito > inspecionar > console

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Aula 2

// isso é um comentário em js
    trechos de código que são ignorados pelo motor do js
    os comentarios não são executados

Ao executar um código no vscode estamos usando o node.js
Ao executar um código no navegador estamos usando o motor do google chrome
No caso as duas engines são iguais que é a V8

por alguma razão é usado comentarios no código
Um código bom não precisa de comentarios. escreva códigos limpos

// comentário de uma linha inteira e trecho de linha(após um código)

/*
Um bloco de código
Parecido com o C
Muito usado em blibiotecas
*/

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Aula 3

o vs code tem um terminal integrado
podemos usar um terminal do pc também
cd caminho 
    para ir para determinada pasta
    no terminal
    no windows use \ e nao /
para executar um código use 
    node .\arquivos

é possível linkar html5 com js
    use a tag <script> <\script>
        não é uma boa pratica usar a tag script
        é possivel colocar a tag script dentro de head e do body
        quando colocado dentro do head o navegador pode ter delay
        use a tag script no final da tag body

para inspecionar o código fonte de uma página use crtl + u

é interessante separar o html do css e do js
    para separar o js do html5 use:
        <script src='caminho do arquivo'> </script>
    crie uma pasta para o js
mesmo o node.js e o chrome terem a mesma engine eles não são iguais

função alert('string')
    janela com uma mensagem
    segura a página até que o usuário clique em ok
    O node não consegue executar o alert();

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Aula 4

Variaveis
    usado para guardar um valor na memória
    usado para evitar repetições (odiamos repetir código)
    pode ser modificado ao longo do código
    são criadas com:
        let nome_variavel = valor;
        var nome_variavel = valor;
            var é mais antigo, use let
    
    é possivel apenas inicializar uma variavel 
        let variavel
            assume valor undefined
    
    variaveis podem ter seus valores alterados
    
    não é permitido declarar uma variavel já existente
    
    existem certas palavras ja reservadas da linguagem
        não é permitido criar variaveis com esssas palavras
    
    variaveis precisa ter nomes significativos
        ex:
            //criação de variavel que guarda nome
            let n = 'joao';
            //n não significa nada apenas confunde seu código
        use entao:
            let nomeDoUsuario = 'Joao';
            //veja que possui muito mais valor
    
    nomes de variaveis não podem começar com números
        mas podem conter números
    
    variaveis não podem ter espaços ou traços

    caso precisemos de uma variavel com nome composto use:
        notação camelCase (padrão usado pelos desenvolvedores de js)
            inicie com letra minuscula
            próximas palavras compostas iniciam com letra maiuscula
            ex:
                nomeCompletoDoCliente = 'joão';
    
    as variaveis são case-sensitive
        nomecliente != nomeCliente
        pelo simples fato de uma letra maiuscula cria-se uma nova variavel

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Aula 5

constantes
    possui a mesma regra das variaveis
    não podemos modificar o valor de uma constante
    utilize const
        exp: const numeroPi = 3.141592
        é um valor que não vai mudar durante o código
    a constante não pode ser declarada sem ser inicializada
    // dentro de aspas == 'string'
fora de aspas == number
constantes ja possuem um tipo definido
typeof(valor) ou typeof valor
 sinal de + usado para concatenar e realizar uma soma
 se o primeiro valor for uma string não importa o segundo valor.
 o js vai concatenar os dois valores, mesmo se o segundo for um number

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Aula 6

template string = string com variaveis
 use a crase `texto ${variavel} texto`
    forma mais legivel de se ler
    forma mais moderna

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Aula 7
primeira diferença entre var e let

o let não permite que voce redeclare a variavel

o var permite e isso é um comportamento não desejavél

é possivel criar variaveis sem let e sem const
    são chamadas de variaveis globais
    não faça isso, pode atrapalhar o funcionamento do código

ECMAscript == javascript
    empresa que padroniza o javascript
let surgiu no ECMAscript 2015 (ES6)

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Aula 8
Tipos de dados primitivos

// strings(textos)

//number(int + float) 

//undefined e null
    //não aponta para lugar nenhum na memória
    
    let nomeAluno; // undefined 

    null 
        // nulo, considerado um objeto mas não se encaixa
        // null geralmente usado explicitamente
        // undefined é automatico da linguagem
        // undefined nunca é configurado por nós usuários

// bool - true / false, toda lógica retorna um bool
    usado para alterar o fluxo do código

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Aula 9

/*

        operadores

* (+) adição | concatenação
    se um dos termos for uma string, independente do outro teremos uma concatenação
* (-) subtração
* (*) multiplicação
* (**) potenciação
* (/) divisão
* (%) resto de divição

*/

/*
    ordem de precedencia
1.  ()
2.  **
3.  * / %   (na ordem que aparecer)
4.  + -     (na ordem que aparecer)

*/

// é possivel incrementar usando o operador de incremento(++)
    // semelhante a fazer contador = contador + 1
// é possível decrementar usando contador--
    // semelhante a fazer contador = contador - 1    

//contador = 1. 
    // contador ++ -> passa a ter 2
    // contador ++ -> passa a ter 3

//diferença entre contador++ e ++contador -> mesmo para decremento
    //contador++ incrementa a variavel contador após o seu uso.
    //++contador incrementa a variavel contador antes de usa-la
    //ou seja a diferença está apenas se ele for usado na mesma linha

// vc ve a diferença entre
/*
 let contador = 1
 console.log(contador++)
 
 mas aqui não existe diferença
 
 let contador = 1
 contador++ ou ++contador
 console.log(contador)

 */
/*
    operadores de atribuição
    a+=b        a=a+b
    a-=b        a=a-b
    a/=b        a=a/b
    a*=b        a=a*b
    a**=b       a=a**b
    a%=b        a=a%b
*/

NaN =>> not a number

o js tenta corrigir alguns erros para você

parseInt('string') -> transforma uma string para int
parseFloat('string') ->transforma uma string para float
number('string') -> ele decide se transforma pra inteiro ou pra float


no navegador temos o objeto pai de todos os outros elementos
    objeto window
        digite window no console do navegador para ver os métodos dele 
        logo alert(); é um atalho para window.alert();

além do alert(); temos duas funções parecidas
    window.corfim('text');
        apresenta duas opções: e retorna um boolean
            cancelar(false)     ok (true)
    window.prompt('text');
        apresenta duas opções: e retorna
            cancelar(null)     ok (string digitada)

para limpar o prompt use crtl + l

a diferença entre uma função e um método é que o método é uma função dentro do objeto.

uma função pode ou não retornar um valor.
    se a função não retornar nada temos (undefined)
    se não vamos ter um tipo de dado primitivo
        podemos capturar a informação usando uma variavel
        ex: const confirma = window.confirm('Realmente deseja apagar');


lembre-se o prompt() retorna uma string mesmo que você digite um número
podemos converter para um número usando:
    parseFloat()
    parseInt()
    Number() // n maiusculo


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Aula 10

sempre que você mudar um valor de uma variavel, salve ela antes usando uma outra variavel
ou podemos fazer de uma maneira mais moderna:
    [varA, varB, varC] = [varB, varC, varA]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Aula 11

mais sobre strings
ja sabemos que uma string é um texto;

além do jogo de aspas para mostrar uma aspas podemos usar:
    \" -> considerado como texto
        feio, evite usar 
    \ é um caractere de escape
    \\ mostra uma \ 

um texto é um iteravel

cada caractere possui um indice
o primeiro elemento possui indice 0

use string[indice]
    caso for um indice maior ou negativo
        retorna undefined


               012345
let umTexto = 'string';
console.log(umTexto[3])  // vai mostrar  o 'i'

uma string é um objeto
    logo podemos usar o método .charAt(indice)
    
    ele também retorna a letra do indice 
    
    método .concat(string1, string2, ..., stringN)

    .indexOf('texto')
        quando eu quero saber qual o indice que o texto que eu digitei começar
    .indexOf('texto', 5)
        procura o texto digitado a partir do indice 5
    
    se .indexOf(string) não encontrar nada ele retorna -1
    se ele encontrar ele retorna o indice que começa

    .lastIndexOf(string)
        faz o mesmo que o de cima mas de tras pra frente(logo procuramos o ultimo)
    

expressões regulares (muito grande)
    match, search e replace

    .replace('um', 'Outra')
        substitui onde tiver um por outra


o método string.length retorna o tamanho da string

o método string.slice(n, x)
    fatia a string começando em n e indo até x-1
    podemos usar números negativos.
        ele faz basicamente uma subtração do tamanho da string
        é como se o ultimo item fosse o -1

o método string.substring(tamanho string - onde começa, tamanho string onde termina)
    faz a mesma coisa que o método acima mas da mais trabalho


o método .split(' ')
    divide uma string em um array toda vez que ele encontrar espaços

.split(' ', 2)
    separa sómente as duas primeiras palavras

.toUpperCase();
    transforma tudo para maiusculo

.toLowerCase();
    transforma tudo para minusculo

caso queira ler a documentação use:
    https://www.w3schools.com/js/default.asp
    https://developer.mozilla.org/pt-BR/docs/Web/JavaScript     mozila
    ou o da ecma que é em ingles e formal




document está dentro de window
    .write() escreve no documento html
        nao serve pra muita coisa

    .body.innerHTML 
        retorna o que está escrito no documento HTML 
        podemos alterar usando um sinal de = 'novo texto'
            podemos usar a concatenação += 
        <br/> para quebrar linha -> o inner tabem ler texto html

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//soma
console.log(num1 + num2);

//concatenação
console.log(num1 + num2String);
console.log(num1String + num2String);
console.log(num1String + num2String);

console.log(typeof num1); //número
console.log(typeof num1String);//string

// método toString para transformar um number em uma string();
// se passarmos um número para esse método ele irá converter para a base decimal do número
    // ex: let num1 = 30;
    // let num1Hexa = num1.toString(16);
    //console.log(num1Hexa) --> 1e
// método toFixed(número de casas decimais)
console.log('um número grande arredondado para duas casas decimais:')
console.log('Número grande: ', num3);
console.log('Número fixado: ', num3.toFixed(2));

let temp = num1 * 'ola';
// essa é uma conta falsa
let contaVerdadeira = Number.isNaN(temp);
// temp não é um número? true / false ->> false
console.log(contaVerdadeira);

// padrão IEEE 754-2008
// os números com ponto flutuante são imprecisos.
// * podemos transformar para inteiro
// * melhor forma: Number(num1.toFixed(2))
    // assim perde a imprecisão


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Aula 12

objeto Math 

v2 = Math.floor(v1)
    retorna o valor de v1 para v2 arredondado para baixo 

v2 = Math.ceil(v1)
    retorna o valor de v1 para v2 arredondado para cima

v2 = Math.round(v1)
    retorna o valor de v1 para v2 arredondado para o mais perto 

let sequenciaDeNumeros = [1,2,3,4,5,6,7,8,9];
let maiorNumero = Math.max(sequenciaDeNumeros);
    pega o maior número de uma sequenciaDeNumeros
let menorNumero = Math.min(sequenciaDeNumeros);
    pega o menor número de uma sequenciaDeNumeros


let numAlet = Math.random();
    gera um número aleatório entre 0 e 1 com o 1 não incluido
    podemos usar essa função para gerar um número aleatório entre 5 e 10 usando o seguinte código
        
        const menorNumPossivel = 5;
        const maiorNumPossivel = 10;
        let numAleatorio = Math.random() * (maiorNumPossivel - menorNumPossivel) + menorNumPossivel;
            
            a ideia é que se Math.random() for == 0 temos um resultado = 0 + 5 == menorNumPossivel
                          se Math.random() for == 1 temos um resultado == (10 - 5) + 5 == maiorNumPossivel
                          e para os outros resultados temos um número entre 5 e 10
            se quiser arredonde

Math.pow(a,b)   retorna a elevado a b
    de preferencia ao operador **       a ** b 
    podemos pegar uma raiz quadrada usando fração (1/2)     a ** (1/2)  ou a ** 0.5 


em javascript temos o tipo de dado númerico 'infinity'
    portanto uma divisão por 0 é possível, tome cuidado
    é avaliado como true nos boolean

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Aula 13

geralmente usamos o objeto:
    window.document.body.innerHTML para alterar o corpo do documento na pagina

mas na pratica temos que alterar oq estiver dentro de tags nos arquivos html

é necessário marcar os locais que queremos modificar usando tags e id's 

dentro de document temos métodos para alterar esses id's das tags
    document.getElementById(string do id)
        esse comando retorna a tag do elemento que queremos, logo devemos salvar em uma variavel

em html é recomendado que tenhamos somente um id na pagina

